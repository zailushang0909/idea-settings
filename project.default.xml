<application>
  <component name="ProjectManager">
    <defaultProject>
      <component name="AnalysisProjectProfileManager">
        <option name="PROJECT_PROFILE" />
        <option name="USE_PROJECT_LEVEL_SETTINGS" value="false" />
        <list size="0" />
      </component>
      <component name="CheckStyle-IDEA">
        <option name="configuration">
          <map>
            <entry key="checkstyle-version" value="8.41" />
            <entry key="copy-libs" value="true" />
            <entry key="location-0" value="BUNDLED:(bundled):Sun Checks" />
            <entry key="location-1" value="BUNDLED:(bundled):Google Checks" />
            <entry key="scan-before-checkin" value="false" />
            <entry key="scanscope" value="JavaOnly" />
            <entry key="suppress-errors" value="false" />
          </map>
        </option>
      </component>
      <component name="JUnitGeneratorProjectSettings">
        <option name="outputFilePattern" value="${SOURCEPATH}/../../test/java/${PACKAGE}/${FILENAME}" />
        <option name="selectedTemplateKey" value="JUnit 4" />
        <option name="vmTemplates">
          <map>
            <entry key="JUnit 3" value="######################################################################################## &#10;## &#10;## Available variables: &#10;##         $entryList.methodList - List of method composites &#10;##         $entryList.privateMethodList - List of private method composites &#10;##         $entryList.fieldList - ArrayList of class scope field names &#10;##         $entryList.className - class name &#10;##         $entryList.packageName - package name &#10;##         $today - Todays date in MM/dd/yyyy format &#10;## &#10;##            MethodComposite variables: &#10;##                $method.name - Method Name &#10;##                $method.signature - Full method signature in String form &#10;##                $method.reflectionCode - list of strings representing commented out reflection code to access method (Private Methods) &#10;##                $method.paramNames - List of Strings representing the method's parameters' names &#10;##                $method.paramClasses - List of Strings representing the method's parameters' classes &#10;## &#10;## You can configure the output class name using &quot;testClass&quot; variable below. &#10;## Here are some examples: &#10;## Test${entry.ClassName} - will produce TestSomeClass &#10;## ${entry.className}Test - will produce SomeClassTest &#10;## &#10;######################################################################################## &#10;## &#10;#macro (cap $strIn)$strIn.valueOf($strIn.charAt(0)).toUpperCase()$strIn.substring(1)#end &#10;## Iterate through the list and generate testcase for every entry. &#10;#foreach ($entry in $entryList) &#10;#set( $testClass=&quot;${entry.className}Test&quot;) &#10;## &#10;package test.$entry.packageName; &#10;&#10;import junit.framework.Test; &#10;import junit.framework.TestSuite; &#10;import junit.framework.TestCase; &#10;&#10;/** &#10;* ${entry.className} Tester. &#10;* &#10;* @author &lt;Authors name&gt; &#10;* @since &lt;pre&gt;$today&lt;/pre&gt; &#10;* @version 1.0 &#10;*/ &#10;public class $testClass extends TestCase { &#10;public $testClass(String name) { &#10;super(name); &#10;} &#10;&#10;public void setUp() throws Exception { &#10;super.setUp(); &#10;} &#10;&#10;public void tearDown() throws Exception { &#10;super.tearDown(); &#10;} &#10;&#10;#foreach($method in $entry.methodList) &#10;/** &#10;* &#10;* Method: $method.signature &#10;* &#10;*/ &#10;public void test#cap(${method.name})() throws Exception { &#10;//TODO: Test goes here... &#10;} &#10;&#10;#end &#10;&#10;#foreach($method in $entry.privateMethodList) &#10;/** &#10;* &#10;* Method: $method.signature &#10;* &#10;*/ &#10;public void test#cap(${method.name})() throws Exception { &#10;//TODO: Test goes here... &#10;#foreach($string in $method.reflectionCode) &#10;$string &#10;#end &#10;} &#10;&#10;#end &#10;&#10;public static Test suite() { &#10;return new TestSuite(${testClass}.class); &#10;} &#10;} &#10;#end" />
            <entry key="JUnit 4" value="######################################################################################## &#10;## &#10;## Available variables: &#10;##         $entryList.methodList - List of method composites &#10;##         $entryList.privateMethodList - List of private method composites &#10;##         $entryList.fieldList - ArrayList of class scope field names &#10;##         $entryList.className - class name &#10;##         $entryList.packageName - package name &#10;##         $today - Todays date in MM/dd/yyyy format &#10;## &#10;##            MethodComposite variables: &#10;##                $method.name - Method Name &#10;##                $method.signature - Full method signature in String form &#10;##                $method.reflectionCode - list of strings representing commented out reflection code to access method (Private Methods) &#10;##                $method.paramNames - List of Strings representing the method's parameters' names &#10;##                $method.paramClasses - List of Strings representing the method's parameters' classes &#10;## &#10;## You can configure the output class name using &quot;testClass&quot; variable below. &#10;## Here are some examples: &#10;## Test${entry.ClassName} - will produce TestSomeClass &#10;## ${entry.className}Test - will produce SomeClassTest &#10;## &#10;######################################################################################## &#10;##&#10;## 首字母大写 &#10;#macro (cap $strIn)$strIn.valueOf($strIn.charAt(0)).toUpperCase()$strIn.substring(1)#end &#10;## 首字母小写 自定义down&#10;#macro (down $strIn)$strIn.valueOf($strIn.charAt(0)).toLowerCase()$strIn.substring(1)#end&#10;## 截取字段 自定义substring&#10;#macro (substr $strIn)$strIn.substring(0, $strIn.indexOf(&quot;Impl&quot;))#end&#10;## Iterate through the list and generate testcase for every entry. &#10;#foreach ($entry in $entryList) &#10;## 赋值操作&#10;#set( $testClass=&quot;${entry.className}Test&quot;) &#10;## 自定义赋值&#10;#set( $service=&quot;#substr(${entry.className})&quot;) &#10;## &#10;package $entry.packageName; &#10; &#10;import org.junit.Test; &#10;import org.junit.Before; &#10;import org.junit.After; &#10; &#10;/** &#10;* ${entry.className} Tester. &#10;* &#10;* @author sunlei &#10;* @date $today&#10;* @version 1.0 &#10;*/ &#10;@RunWith(SpringJUnit4ClassRunner.class)&#10;@ContextConfiguration(locations = { &quot;classpath*:/spring-context*.xml&quot; })&#10;@FixMethodOrder(MethodSorters.NAME_ASCENDING)&#10;public class $testClass { &#10;    &#10;    @Autowired&#10;    $service #down($service);&#10;    &#10;    @Before&#10;    public void before() throws Exception { &#10;    } &#10; &#10;    @After&#10;    public void after() throws Exception { &#10;    } &#10; &#10;    #foreach($method in $entry.methodList) &#10;/** &#10;    * &#10;    * Method: $method.signature &#10;    * &#10;    */ &#10;    @Test&#10;    public void test#cap(${method.name})() throws Exception { &#10;        //TODO: Test goes here... &#10;    } &#10;    &#10;    #end     &#10;    #foreach($method in $entry.privateMethodList) &#10;   /** &#10;    * &#10;    * Method: $method.signature &#10;    * &#10;    */ &#10;    @Test&#10;    public void test#cap(${method.name})() throws Exception { &#10;        //TODO: Test goes here... &#10;    #foreach($string in $method.reflectionCode) &#10;    $string &#10;    #end &#10;} &#10; &#10;#end &#10;} &#10;#end" />
          </map>
        </option>
      </component>
      <component name="JavaScriptSettings">
        <option name="languageLevel" value="ES6" />
      </component>
      <component name="JsFlowSettings">
        <service-enabled>true</service-enabled>
        <exe-path />
        <other-services-enabled>true</other-services-enabled>
        <auto-save>true</auto-save>
      </component>
      <component name="MavenImportPreferences">
        <option name="generalSettings">
          <MavenGeneralSettings>
            <option name="mavenHome" value="D:/apache-maven-3.3.9" />
            <option name="userSettingsFile" value="D:\apache-maven-3.3.9\conf\settings.xml" />
          </MavenGeneralSettings>
        </option>
      </component>
      <component name="MavenRunner">
        <option name="jreName" value="1.8" />
        <option name="vmOptions" value="-DarchetypeCatalog=local" />
      </component>
      <component name="ProjectViewState">
        <option name="hideEmptyMiddlePackages" value="true" />
        <option name="showLibraryContents" value="true" />
      </component>
      <component name="PropertiesComponent">
        <property name="JavaScriptWeakerCompletionTypeGuess" value="true" />
        <property name="last_opened_file_path" value="E:/传智播客/ideaworkspace/svntravel" />
        <property name="nodejs_interpreter_path.stuck_in_default_project" value="undefined stuck path" />
        <property name="nodejs_npm_path_reset_for_default_project" value="true" />
        <property name="settings.editor.selected.configurable" value="preferences.pluginManager" />
      </component>
      <component name="SuppressionsComponent">
        <option name="suppComments" value="[]" />
      </component>
      <component name="SvnConfiguration">
        <configuration>C:\Users\sunlei\AppData\Roaming\Subversion</configuration>
      </component>
      <component name="masterDetails">
        <states>
          <state key="ProjectJDKs.UI">
            <settings>
              <last-edited>1.7 (1)</last-edited>
              <splitter-proportions>
                <option name="proportions">
                  <list>
                    <option value="0.2" />
                  </list>
                </option>
              </splitter-proportions>
            </settings>
          </state>
        </states>
      </component>
    </defaultProject>
  </component>
</application>